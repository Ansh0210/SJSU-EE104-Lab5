{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fbf4ed3d-1c2a-4947-9634-d18b66a59105",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%microblaze/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%pybind11/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pynq import Overlay\n",
    "from pynq import GPIO\n",
    "from time import sleep\n",
    "from ipywidgets import interact\n",
    "import ipywidgets as widgets\n",
    "\n",
    "# overlay\n",
    "ps_gpio_design = Overlay(\"ps_gpio_kv260.bit\")\n",
    "\n",
    "# GPIO objects\n",
    "ems_led1 = GPIO(GPIO.get_gpio_pin(0), 'out')\n",
    "ems_led2 = GPIO(GPIO.get_gpio_pin(4), 'out')\n",
    "turn_led1 = GPIO(GPIO.get_gpio_pin(1), 'out')\n",
    "turn_led2 = GPIO(GPIO.get_gpio_pin(2), 'out')\n",
    "turn_led3 = GPIO(GPIO.get_gpio_pin(3), 'out')\n",
    "slider = GPIO(GPIO.get_gpio_pin(5), 'in')\n",
    "buzzer = GPIO(GPIO.get_gpio_pin(6), 'out')\n",
    "\n",
    "DELAY = 0.5\n",
    "\n",
    "right_state = 0\n",
    "left_state = 1\n",
    "brake_state = 2\n",
    "emer_state = 3\n",
    "\n",
    "# handles the main logic\n",
    "def main():\n",
    "    for i in range(0,3):\n",
    "        if i == right_state:\n",
    "            right_turn()\n",
    "            \n",
    "        elif i == left_state:\n",
    "            left_turn()\n",
    "            \n",
    "        elif i == brake_state:\n",
    "            brake_light()\n",
    "        \n",
    "        elif i == emer_state:\n",
    "            emer_lights()  \n",
    "        \n",
    "# turns the buzzer and leds off after the code is run\n",
    "buzzer.write(0)\n",
    "ems_led1.write(0)\n",
    "ems_led2.write(0)\n",
    "turn_led3.write(0)\n",
    "turn_led2.write(0)\n",
    "turn_led1.write(0)    \n",
    "\n",
    "def play_sound(frequency, duration=100):\n",
    "    period = 1/frequency\n",
    "    timeHigh = period/2\n",
    "    for _ in range(0, int(duration)): #, int(timeHigh*1000)):\n",
    "        buzzer.write(1)\n",
    "        sleep(timeHigh)\n",
    "        buzzer.write(0)\n",
    "        sleep(timeHigh)\n",
    "\n",
    "# Right turn        \n",
    "def right_turn():    \n",
    "    for i in range(3):\n",
    "        turn_led1.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led2.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led3.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led3.write(0)\n",
    "        turn_led2.write(0)\n",
    "        turn_led1.write(0)\n",
    "\n",
    "# Left turn\n",
    "def left_turn():\n",
    "    for i in range(3):\n",
    "        turn_led3.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led2.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led1.write(1)\n",
    "        sleep(DELAY)\n",
    "        turn_led3.write(0)\n",
    "        turn_led2.write(0)\n",
    "        turn_led1.write(0)\n",
    "\n",
    "#Brake light    \n",
    "def brake_light():\n",
    "    for i in range(1):\n",
    "        #Brake Light\n",
    "        for i in range(3):\n",
    "            turn_led1.write(1)\n",
    "            turn_led2.write(1)\n",
    "            turn_led3.write(1)\n",
    "        sleep(1)\n",
    "        turn_led1.write(0)\n",
    "        turn_led2.write(0)\n",
    "        turn_led3.write(0)\n",
    "        sleep(1)\n",
    "\n",
    "# Emergency Lights\n",
    "def emer_lights():\n",
    "    ems_led1.write(1)\n",
    "    ems_led1.write(0)\n",
    "    ems_led2.write(1)\n",
    "    ems_led2.write(0)\n",
    "\n",
    "    for i in range(5):\n",
    "        slider_value = slider.read()\n",
    "        if (slider_value == 0):\n",
    "            buzzer.write(0)\n",
    "            for i in range(3):\n",
    "                ems_led1.write(1)\n",
    "                sleep(DELAY)\n",
    "                ems_led2.write(1)\n",
    "                ems_led1.write(0)\n",
    "                sleep(DELAY)\n",
    "                ems_led2.write(0)\n",
    "        if (slider_value > 0):\n",
    "            buzzer.write(1)\n",
    "            for i in range(3):\n",
    "                ems_led1.write(1)\n",
    "                sleep(DELAY)\n",
    "                ems_led2.write(1)\n",
    "                ems_led1.write(0)\n",
    "                sleep(DELAY)\n",
    "                ems_led2.write(0)\n",
    "            for i in range(5):\n",
    "                    play_sound(5000)\n",
    "            \n",
    "        sleep(DELAY)    \n",
    "\n",
    "#to run the code\n",
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9582585-9ec7-4ed2-9b9c-f25ff402f2fd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
